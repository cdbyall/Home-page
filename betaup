<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hours For Shelby</title>
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /*! tailwindcss v3.4.1 | MIT License | https://tailwindcss.com */
        *,::before,::after{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}::before,::after{--tw-content:''}html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;font-feature-settings:normal;font-variation-settings:normal;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}ol,ul,menu{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}button,[role=button]{cursor:pointer}:disabled{cursor:default}img,svg,video,canvas,audio,iframe,embed,object{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}*, ::before, ::after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / .5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / .5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.absolute{position:absolute}.relative{position:relative}.fixed{position:fixed}.inset-0{inset:0px}.bottom-6{bottom:1.5rem}.bottom-0{bottom:0px}.left-0{left:0px}.left-\[50\%\]{left:50%}.right-0{right:0px}.right-4{right:1rem}.top-0{top:0px}.top-4{top:1rem}.z-\[-1\]{z-index:-1}.z-\[40\]{z-index:40}.z-\[50\]{z-index:50}.z-\[100\]{z-index:100}.z-\[101\]{z-index:101}.z-\[102\]{z-index:102}.m-4{margin:1rem}.mx-auto{margin-left:auto;margin-right:auto}.mb-1{margin-bottom:.25rem}.mb-2{margin-bottom:.5rem}.mb-4{margin-bottom:1rem}.mb-6{margin-bottom:1.5rem}.ml-2{margin-left:.5rem}.mt-1{margin-top:.25rem}.mt-2{margin-top:.5rem}.mt-4{margin-top:1rem}.block{display:block}.inline-block{display:inline-block}.flex{display:flex}.grid{display:grid}.hidden{display:none}.h-64{height:16rem}.h-full{height:100%}.max-h-\[90vh\]{max-height:90vh}.min-h-screen{min-height:100vh}.w-full{width:100%}.w-16{width:4rem}.h-16{height:4rem}.max-w-3xl{max-width:48rem}.max-w-5xl{max-width:64rem}.max-w-lg{max-width:32rem}.max-w-md{max-width:28rem}.max-w-sm{max-width:24rem}.max-w-xs{max-width:20rem}.flex-1{flex:1 1 0%}.flex-grow{flex-grow:1}.transform{transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.translate-y-8{--tw-translate-y:2rem}.translate-y-\[-150\%\]{--tw-translate-y:-150%}.translate-y-\[0\]{--tw-translate-y:0px}.translate-y-\[20px\]{--tw-translate-y:20px}.translate-x-\[-50\%\]{--tw-translate-x:-50%}.translate-x-\[0\]{--tw-translate-x:0px}.translate-x-\[100\%\]{--tw-translate-x:100%}.scale-\[1\]{--tw-scale-x:1;--tw-scale-y:1}.tracking-tight{letter-spacing:-.025em}.resize-none{resize:none}.space-y-2>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-top:calc(.5rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.5rem * var(--tw-space-y-reverse))}.space-y-3>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-top:calc(.75rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.75rem * var(--tw-space-y-reverse))}.space-y-6>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-top:calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1.5rem * var(--tw-space-y-reverse))}.overflow-hidden{overflow:hidden}.overflow-y-auto{overflow-y:auto}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:.5rem}.rounded-l-3xl{border-top-left-radius:1.5rem;border-bottom-left-radius:1.5rem}.border{border-width:1px}.border-2{border-width:2px}.border-dashed{border-style:dashed}.bg-black\/10{background-color:rgb(0 0 0 / .1)}.bg-\[var\(--bg-primary\)\]{background-color:var(--bg-primary)}.p-1{padding:.25rem}.p-2{padding:.5rem}.p-3{padding:.75rem}.p-4{padding:1rem}.px-4{padding-left:1rem;padding-right:1rem}.px-5{padding-left:1.25rem;padding-right:1.25rem}.px-8{padding-left:2rem;padding-right:2rem}.py-2{padding-top:.5rem;padding-bottom:.5rem}.py-3{padding-top:.75rem;padding-bottom:.75rem}.py-4{padding-top:1rem;padding-bottom:1rem}.py-8{padding-top:2rem;padding-bottom:2rem}.pr-2{padding-right:.5rem}.pr-6{padding-right:1.5rem}.pt-12{padding-top:3rem}.text-left{text-align:left}.text-center{text-align:center}.text-sm{font-size:.875rem;line-height:1.25rem}.text-lg{font-size:1.125rem;line-height:1.75rem}.text-xl{font-size:1.25rem;line-height:1.75rem}.text-2xl{font-size:1.5rem;line-height:2rem}.text-4xl{font-size:2.25rem;line-height:2.5rem}.font-bold{font-weight:700}.font-extrabold{font-weight:800}.font-medium{font-weight:500}.font-semibold{font-weight:600}.text-\[var\(--text-primary\)\]{color:var(--text-primary)}.text-\[var\(--text-secondary\)\]{color:var(--text-secondary)}.opacity-0{opacity:0}.opacity-50{opacity:.5}.opacity-90{opacity:.9}.shadow-lg{--tw-shadow:0 10px 15px -3px rgb(0 0 0 / .1), 0 4px 6px -4px rgb(0 0 0 / .1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}outline-none{outline:2px solid transparent;outline-offset:2px}.pointer-events-none{pointer-events:none}.transition-all{transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition-colors{transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition-opacity{transition-property:opacity;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition-transform{transition-property:transform;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.duration-200{transition-duration:.2s}.duration-300{transition-duration:.3s}.duration-500{transition-duration:.5s}.\[\!mt-8\]:not(\[hidden\])\~:not(\[hidden\]){--tw-space-y-reverse:0;margin-top:calc(2rem * calc(1 - var(--tw-space-y-reverse)))!important;margin-bottom:calc(2rem * var(--tw-space-y-reverse))!important}.\[\!rounded-l-3xl\]{border-top-left-radius:1.5rem!important;border-bottom-left-radius:1.5rem!important}.\[\!rounded-r-none\]{border-top-right-radius:0px!important;border-bottom-right-radius:0px!important}.hover\:bg-black\/10:hover{background-color:rgb(0 0 0 / .1)}.hover\:text-blue-500:hover{--tw-text-opacity:1;color:rgb(59 130 246 / var(--tw-text-opacity))}.hover\:text-red-500:hover{--tw-text-opacity:1;color:rgb(239 68 68 / var(--tw-text-opacity))}

        :root {
            --bg-primary: #F3EAD3;
            --bg-secondary: #FFFFFF;
            --text-primary: #4A4A4A;
            --text-secondary: #7A7A7A;
            --accent-primary: #86A8E7;
            --accent-secondary: #91EAE4;
            --border-default: #D9D9D9;
            --shadow-color: rgba(0, 0, 0, 0.1);
        }
        body { font-family: 'Inter', sans-serif; background-color: var(--bg-primary); color: var(--text-primary); transition: background-color 0.5s ease, color 0.5s ease; }
        .card { background-color: var(--bg-secondary); border-radius: 1.5rem; box-shadow: 0 10px 25px -5px var(--shadow-color), 0 8px 10px -6px var(--shadow-color); transition: background-color 0.5s ease, box-shadow 0.5s ease; }
        .btn { border-radius: 0.75rem; transition: transform 0.2s ease, background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease; }
        .btn:active { transform: scale(0.95); }
        .btn-primary { background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary)); color: white; border-color: transparent; }
        .btn-secondary { background-color: transparent; border: 1px solid var(--accent-primary); color: var(--accent-primary); }
        .btn-danger { background-color: #E74C3C; color: white; border-color: transparent; }
        .input-field { background-color: var(--bg-primary); border: 1px solid transparent; border-radius: 0.75rem; transition: background-color 0.3s ease, border-color 0.3s ease; padding: 0.5rem 0.75rem; cursor: text; }
        .input-field:focus { outline: none; border-color: var(--accent-primary); background-color: var(--bg-secondary); }
        #notification-toast { position: fixed; bottom: 1.25rem; right: 1.25rem; z-index: 100; opacity: 0; transform: translateY(2rem); transition: opacity 0.3s ease, transform 0.3s ease; }
        #notification-toast.show { opacity: 1; transform: translateY(0); }
        #timesheet-output { font-family: 'Courier New', Courier, monospace; white-space: pre; background-color: var(--bg-primary); }
        .modal-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 50; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; }
        .modal-backdrop.active { opacity: 1; pointer-events: auto; }
        .modal-content { transform: scale(0.7); opacity: 0; transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), opacity 0.2s ease-out; }
        .modal-backdrop.active .modal-content { transform: scale(1); opacity: 1; }

        /* --- FIX: Added missing Tailwind utility classes --- */
        .flex-wrap { flex-wrap: wrap; }
        .grid-cols-7 { grid-template-columns: repeat(7, minmax(0, 1fr)); }
        .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
        .gap-2 { gap: 0.5rem; }
        .gap-3 { gap: 0.75rem; }
        .gap-4 { gap: 1rem; }
        .flex-col { flex-direction: column; }
        .items-center { align-items: center; }
        .justify-center { justify-content: center; }
        .justify-between { justify-content: space-between; }
        .text-secondary { color: var(--text-secondary); }
        .text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
        .text-5xl { font-size: 3rem; line-height: 1; }
        .aspect-square { aspect-ratio: 1 / 1; }
        .rounded-2xl { border-radius: 1rem; }
        .text-left { text-align: left; }
        
        /* --- Side Panel --- */
        #side-panel-container { position: fixed; top: 0; right: 0; bottom: 0; left: 0; z-index: 40; pointer-events: none; }
        #side-panel-backdrop { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.3); opacity: 0; transition: opacity 0.3s ease-in-out; }
        #side-panel-content { position: absolute; top: 0; right: 0; height: 100%; width: 90%; max-width: 400px; transform: translateX(100%); transition: transform 0.3s ease-in-out; }
        #side-panel-container.active { pointer-events: auto; }
        #side-panel-container.active #side-panel-backdrop { opacity: 1; }
        #side-panel-container.active #side-panel-content { transform: translateX(0); }

        /* --- Animated Backgrounds --- */
        #background-animation-container { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; pointer-events: none; overflow: hidden; }
        .animated-gradient { background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab); background-size: 400% 400%; animation: gradient 15s ease infinite; }
        @keyframes gradient { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } }
        .orb { position: absolute; bottom: -200px; background-color: rgba(134, 168, 231, 0.2); border-radius: 50%; animation: rise 20s infinite linear; }
        @keyframes rise { 0% { transform: translateY(0); } 100% { transform: translateY(-120vh); } }
        .star { position: absolute; background-color: white; border-radius: 50%; animation: twinkle 5s infinite; }
        @keyframes twinkle { 0%, 100% { opacity: 0; } 50% { opacity: 0.8; } }

        /* --- Achievement Notification --- */
        #achievement-toast { position: fixed; top: 1.25rem; left: 50%; transform: translate(-50%, -150%); z-index: 101; padding: 1rem 1.5rem; background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary)); color: white; border-radius: 1.5rem; box-shadow: 0 10px 25px -5px var(--shadow-color); display: flex; align-items: center; gap: 1rem; transition: transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1); }
        #achievement-toast.show { transform: translate(-50%, 0); }
        #achievement-icon { font-size: 1.75rem; }
        #achievement-details h4 { font-weight: 700; }
        #achievement-details p { font-size: 0.875rem; opacity: 0.9; }
        
        /* --- Splash Screen --- */
        #splash-screen { display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 2rem; }
        #splash-title span { display: inline-block; opacity: 0; transform: translateY(20px); animation: title-fade-in 0.5s forwards cubic-bezier(0.25, 0.46, 0.45, 0.94); }
        @keyframes title-fade-in { to { opacity: 1; transform: translateY(0); } }
        #splash-clock-container { position: relative; width: 64px; height: 64px; }
        .splash-cog { transform-origin: center; animation: spin 2s linear infinite; transition: opacity 0.5s ease-in-out; }
        .splash-clock-face, .splash-clock-hands { opacity: 0; transition: opacity 0.5s ease-in-out; }
        .splash-cog.fade-out { opacity: 0; }
        .splash-clock-face.fade-in, .splash-clock-hands.fade-in { opacity: 1; }
        .minute-hand, .hour-hand { transform-origin: center; }
        .minute-hand.spinning { animation: spin-hand 60s linear infinite; }
        .hour-hand.spinning { animation: spin-hand 720s linear infinite; }
        @keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }
        @keyframes spin-hand { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }
        #splash-start-btn { opacity: 0; animation: fade-in 0.5s forwards 2.5s; }
        @keyframes fade-in { to { opacity: 1; } }

        /* --- Timecard Popup --- */
        #timecard-popup { position: fixed; bottom: 0; left: 50%; transform: translate(-50%, 150%); z-index: 102; width: 90%; max-width: 350px; padding: 1.5rem 2rem; text-align: center; transition: transform 0.4s cubic-bezier(0.215, 0.610, 0.355, 1); border-bottom-left-radius: 0; border-bottom-right-radius: 0; }
        #timecard-popup.show { transform: translate(-50%, 0); }
        #timecard-status { font-size: 1.5rem; font-weight: 700; color: var(--text-primary); margin-bottom: 0.25rem; }
        #timecard-time { font-size: 1.25rem; color: var(--accent-primary); font-weight: 500; }

        /* --- FIX: Responsive Design Media Queries --- */
        @media (min-width: 640px) {
            .sm\:p-6 { padding: 1.5rem; }
            .sm\:px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
            .sm\:pt-16 { padding-top: 4rem; }
            .sm\:gap-8 { gap: 2rem; }
            .sm\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
            .sm\:text-5xl { font-size: 3rem; line-height: 1; }
            .sm\:mb-8 { margin-bottom: 2rem; }
            .sm\:space-y-8 > :not([hidden]) ~ :not([hidden]) {
                --tw-space-y-reverse: 0;
                margin-top: calc(2rem * calc(1 - var(--tw-space-y-reverse)));
                margin-bottom: calc(2rem * var(--tw-space-y-reverse));
            }
        }
        @media (min-width: 768px) {
            .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
            .md\:col-span-2 { grid-column: span 2 / span 2; }
        }
        @media (min-width: 1024px) {
            .lg\:p-8 { padding: 2rem; }
        }
    </style>
</head>
<body class="antialiased">

    <div id="splash-screen" class="fixed inset-0 bg-[var(--bg-primary)] z-[100] transition-opacity duration-500 flex flex-col justify-center items-center gap-8">
        <h1 id="splash-title" class="text-4xl font-bold tracking-tight text-[var(--text-primary)]"></h1>
        <div id="splash-clock-container" class="relative w-16 h-16">
            <svg class="absolute inset-0 h-full w-full" viewBox="0 0 24 24">
                <g class="splash-cog">
                    <circle cx="12" cy="12" r="3" fill="none" stroke="currentColor" stroke-width="1.5"></circle>
                    <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z" fill="none" stroke="currentColor" stroke-width="1.5"></path>
                </g>
                <circle class="splash-clock-face" cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="1.5"></circle>
                <g class="splash-clock-hands">
                    <line class="minute-hand" x1="12" y1="12" x2="12" y2="5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></line>
                    <line class="hour-hand" x1="12" y1="12" x2="16" y2="12" stroke="currentColor" stroke-width="2" stroke-linecap="round"></line>
                </g>
            </svg>
        </div>
        <button id="splash-start-btn" class="btn btn-primary font-bold py-3 px-8 text-lg">Start</button>
        <p class="absolute bottom-6 text-sm text-[var(--text-secondary)] opacity-50">1.3</p>
    </div>

    <div id="background-animation-container"></div>

    <div class="min-h-screen p-4 pt-12 sm:p-6 sm:pt-16 lg:p-8">
        <div class="max-w-5xl mx-auto">
            
            <div id="digital-clock" class="text-center mb-6 sm:mb-8 text-4xl sm:text-5xl font-bold text-[var(--text-primary)]" style="text-shadow: 1px 1px 3px var(--shadow-color);"></div>

            <div class="flex justify-center items-center flex-wrap gap-4 sm:gap-8 mb-6 sm:mb-8">
                <button id="clock-in-btn" class="btn btn-primary flex-1 max-w-xs py-4 px-6 text-xl font-bold shadow-lg flex items-center justify-center gap-3">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-sunrise"><path d="M17 18a5 5 0 0 0-10 0"></path><line x1="12" y1="2" x2="12" y2="9"></line><line x1="4.22" y1="10.22" x2="5.64" y2="8.8"></line><line x1="1" y1="18" x2="3" y2="18"></line><line x1="21" y1="18" x2="23" y2="18"></line><line x1="18.36" y1="8.8" x2="19.78" y2="10.22"></line><line x1="12" y1="23" x2="12" y2="18"></line><polyline points="16 5 12 9 8 5"></polyline></svg>
                    <span>Clock In</span>
                </button>
                <button id="clock-out-btn" class="btn btn-secondary flex-1 max-w-xs py-4 px-6 text-xl font-bold shadow-lg flex items-center justify-center gap-3">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-sunset"><path d="M17 18a5 5 0 0 0-10 0"></path><line x1="12" y1="9" x2="12" y2="2"></line><line x1="4.22" y1="10.22" x2="5.64" y2="8.8"></line><line x1="1" y1="18" x2="3" y2="18"></line><line x1="21" y1="18" x2="23" y2="18"></line><line x1="18.36" y1="8.8" x2="19.78" y2="10.22"></line><line x1="12" y1="23" x2="12" y2="18"></line><polyline points="16 5 12 9 8 5"></polyline></svg>
                    <span>Clock Out</span>
                </button>
            </div>

            <main class="space-y-6 sm:space-y-8">
                <div id="calendar-card" class="card p-4 sm:p-6">
                    <div class="flex justify-between items-center mb-4">
                        <button id="prev-month-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&lt;</button>
                        <h2 id="month-year-header" class="text-xl font-bold"></h2>
                        <button id="next-month-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&gt;</button>
                    </div>
                    <div id="calendar-grid" class="grid grid-cols-7 gap-2 text-center max-w-md mx-auto"></div>
                </div>

                <div class="flex justify-center flex-wrap gap-4">
                    <button id="turn-in-hours-btn" class="btn btn-primary font-bold py-3 px-4 sm:px-6 text-lg">Turn In Hours</button>
                    <button id="view-stats-btn" class="btn btn-secondary font-bold py-3 px-4 sm:px-6 text-lg">View Stats</button>
                    <button id="summary-btn" class="btn btn-secondary font-bold py-3 px-4 sm:px-6 text-lg">Summary</button>
                    <button id="settings-btn" class="btn btn-secondary font-bold py-3 px-4 sm:px-6 text-lg">Settings</button>
                </div>

            </main>
        </div>
    </div>

    <div id="side-panel-container" class="fixed inset-0 z-40 pointer-events-none">
        <div id="side-panel-backdrop" class="absolute inset-0 bg-black/30 opacity-0 transition-opacity"></div>
        <div id="side-panel-content" class="card !rounded-l-3xl !rounded-r-none p-6 flex flex-col absolute top-0 right-0 h-full w-[90%] max-w-sm transform translate-x-full transition-transform">
            <div class="flex justify-between items-center mb-2">
                <h3 class="text-lg font-semibold">Selected Day</h3>
                <button id="close-side-panel-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&times;</button>
            </div>
            <p id="display-selected-date" class="text-sm text-[var(--text-secondary)] mb-6">Select a date</p>

            <div class="flex-grow overflow-y-auto pr-2">
                <button id="add-session-btn" title="Add New Session" class="w-full btn btn-secondary mb-4">
                    Add Entry
                </button>
                <div id="sessions-display-area" class="space-y-3 mb-4">
                </div>
            </div>

            <hr class="my-4 border-dashed">
            <div class="flex justify-between items-center">
                <span class="font-bold text-lg">Total for Day:</span>
                <span id="display-day-total" class="font-bold text-xl" style="color: var(--accent-primary);">0.00h</span>
            </div>
            <p id="no-hours-message" class="text-center text-[var(--text-secondary)] py-8 hidden">No hours logged for this day.</p>
        </div>
    </div>


    <div id="time-entry-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-md m-4 p-6">
             <div class="flex justify-between items-center mb-4">
                 <h3 id="modal-title" class="text-lg font-semibold">Log Hours</h3>
                 <button id="close-entry-modal-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&times;</button>
             </div>
            <p id="modal-selected-date" class="text-sm text-[var(--text-secondary)] mb-6"></p>
            <div class="space-y-6">
                <div id="hour-type-container">
                    <label class="text-sm font-medium mb-2 block">Type</label>
                    <div class="grid grid-cols-2 gap-2">
                        <button data-type="CORE" class="hour-type-btn btn font-semibold py-2">CORE</button>
                        <button data-type="ACAP" class="hour-type-btn btn font-semibold py-2">ACAP</button>
                        <button data-type="SICK" class="hour-type-btn btn font-semibold py-2">Sick</button>
                        <button data-type="VAC" class="hour-type-btn btn font-semibold py-2">Vacation</button>
                    </div>
                </div>
                <div id="time-in-container"> <label class="text-sm font-medium">Time In</label> <input id="time-in" type="time" class="input-field w-full mt-1"> </div>
                <div id="time-out-container"> <label class="text-sm font-medium">Time Out</label> <input id="time-out" type="time" class="input-field w-full mt-1"> </div>
                <div id="bulk-hours-container" style="display: none;"> <label class="text-sm font-medium">Hours</label> <input id="bulk-hours" type="number" step="0.01" placeholder="e.g., 8" class="input-field w-full mt-1"> </div>
                <button id="save-btn" class="btn btn-primary w-full py-3 font-bold !mt-8">Save Entry</button>
            </div>
        </div>
    </div>

    <div id="settings-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-md m-4 max-h-[90vh] overflow-y-auto p-6 relative">
            <div class="text-center mb-6">
                 <h2 class="text-2xl font-bold text-[var(--text-primary)]">Hours for Shelby</h2>
                 <p class="text-lg text-[var(--text-secondary)]">Settings</p>
            </div>
            <button id="close-settings-modal-btn" class="absolute top-4 right-4 p-2 rounded-full hover:bg-black/10 transition-colors">&times;</button>
            <div class="space-y-6">
                <div><label for="theme-select" class="block text-sm font-medium mb-1">Color Theme</label><select id="theme-select" class="input-field w-full"></select></div>
                <div><label for="background-select" class="block text-sm font-medium mb-1">Animated Background</label><select id="background-select" class="input-field w-full">
                    <option value="none">None</option>
                    <option value="gradient">Animated Gradient</option>
                    <option value="orbs">Floating Orbs</option>
                    <option value="stars">Starry Night</option>
                </select></div>
                <button id="show-reminder-btn" class="btn btn-secondary w-full py-2">Show Disclaimer</button>
                <button id="clear-data-btn" class="btn btn-danger w-full py-2">Clear All Data</button>
            </div>
        </div>
    </div>

    <div id="summary-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-lg m-4 p-6">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">Summary</h2>
                <button id="close-summary-modal-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&times;</button>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 text-center">
                <div>
                    <p class="text-sm text-[var(--text-secondary)]">Today</p>
                    <p id="summary-today" class="text-2xl font-bold">0.00h</p>
                </div>
                <div>
                    <p class="text-sm text-[var(--text-secondary)]">Last 14 Days</p>
                    <p id="summary-pay-period" class="text-2xl font-bold">0.00h</p>
                </div>
                <div>
                    <p class="text-sm text-[var(--text-secondary)]">Total</p>
                    <p id="summary-total" class="text-2xl font-bold">0.00h</p>
                </div>
            </div>
        </div>
    </div>
    
    <div id="stats-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-3xl m-4 max-h-[90vh] overflow-y-auto p-6">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">Historical Stats</h2>
                <button id="close-stats-modal-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&times;</button>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
                <div class="md:col-span-2">
                    <canvas id="weekly-hours-chart"></canvas>
                </div>
                <div>
                    <canvas id="type-breakdown-chart"></canvas>
                </div>
                 <div id="stats-no-data-message" class="text-center text-[var(--text-secondary)] py-8 hidden">
                     <p>Log some more hours to see your stats here.</p>
                 </div>
            </div>
        </div>
    </div>

    <div id="confirm-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-sm m-4 p-6 text-center">
            <h3 id="confirm-message" class="text-lg font-medium mb-6">Are you sure?</h3>
            <div class="flex justify-center gap-4"> <button id="confirm-cancel-btn" class="btn btn-secondary w-full py-2">Cancel</button> <button id="confirm-ok-btn" class="btn btn-danger w-full py-2">Confirm</button> </div>
        </div>
    </div>

    <div id="disclaimer-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-md m-4 p-6">
            <h3 class="text-lg font-bold mb-4 text-center">Welcome!</h3>
            <p class="text-sm text-left text-[var(--text-secondary)] mb-6">Hi. This app is intended as a helpful little tool to help you keep track of your hours. All your data in this app is saved locally, and any loss of that data is something you, as the user, agree to take full responsibility for. If you choose to use this app to help you record your hours, you're acknowledging all that. This app has no association with Autistry Studios, Inc either.</p>
            <button id="disclaimer-ok-btn" class="btn btn-primary w-full py-2">I Understand</button>
        </div>
    </div>

    <div id="clock-out-type-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-sm m-4 p-6 text-center">
            <h3 class="text-lg font-medium mb-6">What type of hours?</h3>
            <div class="flex flex-col gap-4">
                <button id="confirm-acap-btn" class="btn btn-primary w-full py-3 font-bold">ACAP</button>
                <button id="confirm-core-btn" class="btn btn-primary w-full py-3 font-bold">CORE</button>
                <button id="clock-out-cancel-btn" class="btn btn-secondary w-full py-2 mt-2">Cancel</button>
            </div>
        </div>
    </div>

    <div id="timesheet-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-lg m-4 p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Generated Timesheet</h3>
                <button id="close-timesheet-modal-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&times;</button>
            </div>
            <textarea id="timesheet-output" readonly class="w-full h-64 p-2 border rounded-lg input-field resize-none"></textarea>
            <div class="flex flex-col gap-4 mt-4">
                <button id="copy-timesheet-btn" class="btn btn-primary w-full py-2">Copy Timesheet</button>
                <button id="close-timesheet-btn-bottom" class="btn btn-secondary w-full py-2">Close Window</button>
            </div>
        </div>
    </div>

    <div id="notification-toast" class="card py-3 px-5"> <p id="notification-message"></p> </div>

    <div id="achievement-toast" class="fixed top-5 left-1/2 -translate-x-1/2 z-[101] p-4 pr-6 bg-gradient-to-r from-[var(--accent-primary)] to-[var(--accent-secondary)] text-white rounded-2xl shadow-lg flex items-center gap-4 transition-transform duration-500 -translate-y-[150%]">
        <div id="achievement-icon" class="text-3xl">🏆</div>
        <div id="achievement-details">
            <h4 id="achievement-title" class="font-bold"></h4>
            <p id="achievement-desc" class="text-sm opacity-90"></p>
        </div>
    </div>
    
    <div id="timecard-popup" class="card fixed bottom-0 left-1/2 -translate-x-1/2 w-[90%] max-w-[350px] p-6 text-center transition-transform duration-300 translate-y-[150%] !rounded-b-none">
        <h2 id="timecard-status" class="text-2xl font-bold text-[var(--text-primary)] mb-1"></h2>
        <p id="timecard-time" class="text-xl text-[var(--accent-primary)] font-medium"></p>
    </div>
    
    <script>
        window.onload = function() {
            // --- DOM ELEMENTS ---
            const calendarGrid = document.getElementById('calendar-grid');
            const monthYearHeader = document.getElementById('month-year-header');
            const prevMonthBtn = document.getElementById('prev-month-btn');
            const nextMonthBtn = document.getElementById('next-month-btn');
            const summaryToday = document.getElementById('summary-today');
            const summaryPayPeriod = document.getElementById('summary-pay-period');
            const summaryTotal = document.getElementById('summary-total');
            const sidePanelContainer = document.getElementById('side-panel-container');
            const sidePanelBackdrop = document.getElementById('side-panel-backdrop');
            const closeSidePanelBtn = document.getElementById('close-side-panel-btn');
            const displaySelectedDate = document.getElementById('display-selected-date');
            const addSessionBtn = document.getElementById('add-session-btn');
            const sessionsDisplayArea = document.getElementById('sessions-display-area');
            const displayDayTotal = document.getElementById('display-day-total');
            const noHoursMessage = document.getElementById('no-hours-message');
            const timeEntryModal = document.getElementById('time-entry-modal');
            const closeEntryModalBtn = document.getElementById('close-entry-modal-btn');
            const modalTitle = document.getElementById('modal-title');
            const modalSelectedDate = document.getElementById('modal-selected-date');
            const timeInInput = document.getElementById('time-in');
            const timeOutInput = document.getElementById('time-out');
            const timeInContainer = document.getElementById('time-in-container');
            const timeOutContainer = document.getElementById('time-out-container');
            const hourTypeContainer = document.getElementById('hour-type-container');
            const bulkHoursInput = document.getElementById('bulk-hours');
            const bulkHoursContainer = document.getElementById('bulk-hours-container');
            const hourTypeButtons = document.querySelectorAll('.hour-type-btn');
            const saveBtn = document.getElementById('save-btn');
            const settingsBtn = document.getElementById('settings-btn');
            const closeSettingsModalBtn = document.getElementById('close-settings-modal-btn');
            const settingsModal = document.getElementById('settings-modal');
            const themeSelect = document.getElementById('theme-select');
            const backgroundSelect = document.getElementById('background-select');
            const clearDataBtn = document.getElementById('clear-data-btn');
            const confirmModal = document.getElementById('confirm-modal');
            const confirmMessage = document.getElementById('confirm-message');
            const confirmOkBtn = document.getElementById('confirm-ok-btn');
            const confirmCancelBtn = document.getElementById('confirm-cancel-btn');
            const notificationToast = document.getElementById('notification-toast');
            const notificationMessage = document.getElementById('notification-message');
            const turnInHoursBtn = document.getElementById('turn-in-hours-btn');
            const timesheetModal = document.getElementById('timesheet-modal');
            const closeTimesheetModalBtn = document.getElementById('close-timesheet-modal-btn');
            const closeTimesheetBtnBottom = document.getElementById('close-timesheet-btn-bottom');
            const timesheetOutput = document.getElementById('timesheet-output');
            const copyTimesheetBtn = document.getElementById('copy-timesheet-btn');
            const clockInBtn = document.getElementById('clock-in-btn');
            const clockOutBtn = document.getElementById('clock-out-btn');
            const clockOutTypeModal = document.getElementById('clock-out-type-modal');
            const confirmAcapBtn = document.getElementById('confirm-acap-btn');
            const confirmCoreBtn = document.getElementById('confirm-core-btn');
            const clockOutCancelBtn = document.getElementById('clock-out-cancel-btn');
            const backgroundContainer = document.getElementById('background-animation-container');
            const viewStatsBtn = document.getElementById('view-stats-btn');
            const statsModal = document.getElementById('stats-modal');
            const closeStatsModalBtn = document.getElementById('close-stats-modal-btn');
            const weeklyHoursCtx = document.getElementById('weekly-hours-chart').getContext('2d');
            const typeBreakdownCtx = document.getElementById('type-breakdown-chart').getContext('2d');
            const statsNoDataMessage = document.getElementById('stats-no-data-message');
            const achievementToast = document.getElementById('achievement-toast');
            const achievementTitle = document.getElementById('achievement-title');
            const achievementDesc = document.getElementById('achievement-desc');
            const splashScreen = document.getElementById('splash-screen');
            const splashTitle = document.getElementById('splash-title');
            const splashStartBtn = document.getElementById('splash-start-btn');
            const timecardPopup = document.getElementById('timecard-popup');
            const timecardStatus = document.getElementById('timecard-status');
            const timecardTime = document.getElementById('timecard-time');
            const digitalClock = document.getElementById('digital-clock');
            const summaryBtn = document.getElementById('summary-btn');
            const summaryModal = document.getElementById('summary-modal');
            const closeSummaryModalBtn = document.getElementById('close-summary-modal-btn');
            const disclaimerModal = document.getElementById('disclaimer-modal');
            const disclaimerOkBtn = document.getElementById('disclaimer-ok-btn');
            const showReminderBtn = document.getElementById('show-reminder-btn');

            // --- STATE MANAGEMENT ---
            let currentDate = new Date();
            let selectedDate = null;
            let editingSessionIndex = -1;
            let timeData = {};
            let settings = { theme: 'Parchment', background: 'none' };
            let modalHourType = 'CORE';
            let onConfirmCallback = null;
            let notificationTimeout;
            let weeklyChartInstance = null;
            let typeChartInstance = null;
            let unlockedAchievements = {};
            let achievementQueue = [];
            let isDisplayingAchievement = false;
            let audioContext;
            let autoStartTimer;

            // --- AUDIO INITIALIZATION & PLAYBACK ---
            function initAudio() { try { audioContext = new (window.AudioContext || window.webkitAudioContext)(); const unlockAudio = () => { if (audioContext.state === 'suspended') { audioContext.resume(); } document.body.removeEventListener('click', unlockAudio); document.body.removeEventListener('touchend', unlockAudio); }; document.body.addEventListener('click', unlockAudio); document.body.addEventListener('touchend', unlockAudio); } catch (e) { console.error("Web Audio API is not supported in this browser."); } }
            function playTone(frequency, startTime, duration, volume = 0.2) { if (!audioContext || audioContext.state !== 'running') return; const oscillator = audioContext.createOscillator(); const gainNode = audioContext.createGain(); oscillator.type = 'sine'; oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime + startTime); gainNode.gain.setValueAtTime(volume, audioContext.currentTime + startTime); gainNode.gain.exponentialRampToValueAtTime(0.0001, audioContext.currentTime + startTime + duration); oscillator.connect(gainNode); gainNode.connect(audioContext.destination); oscillator.start(audioContext.currentTime + startTime); oscillator.stop(audioContext.currentTime + startTime + duration); }
            function playAchievementSound() { playTone(880, 0, 0.5, 0.3); }
            function playClockInSound() { playTone(523.25, 0, 0.1); playTone(659.25, 0.1, 0.15); }
            function playClockOutSound() { playTone(659.25, 0, 0.1); playTone(523.25, 0.1, 0.15); }
            function playTurnInSound() { playTone(523.25, 0, 0.1); playTone(659.25, 0.1, 0.1); playTone(783.99, 0.2, 0.15); }


            // --- HELPER FUNCTIONS ---
            function updateDigitalClock() { digitalClock.textContent = new Date().toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' }); }
            function getDateString(date) { return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`; }
            function getExactTime(date) { return `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`; }
            function formatTo12Hour(timeString) { if (!timeString || timeString.includes('M')) return timeString || '--:--'; const [hours, minutes] = timeString.split(':'); const h = parseInt(hours, 10); const ampm = h >= 12 ? 'PM' : 'AM'; let h12 = h % 12; if (h12 === 0) h12 = 12; return `${h12}:${minutes} ${ampm}`; }
            function roundTimeString(timeString) { if (!timeString) return ''; const [hours, minutes] = timeString.split(':').map(Number); const totalMinutes = hours * 60 + minutes; const roundedMinutes = Math.round(totalMinutes / 15) * 15; const newHours = Math.floor(roundedMinutes / 60); const newMinutes = roundedMinutes % 60; const finalHours = newHours % 24; return `${String(finalHours).padStart(2, '0')}:${String(newMinutes).padStart(2, '0')}`; }
            function getDayWithSuffix(d) { const day = d.getDate(); if (day > 3 && day < 21) return day + 'th'; switch (day % 10) { case 1: return day + "st"; case 2: return day + "nd"; case 3: return day + "rd"; default: return day + "th"; } }

            // --- THEME & BACKGROUND MANAGEMENT ---
            const themes = { Parchment: { '--bg-primary': '#F3EAD3', '--bg-secondary': '#FFFFFF', '--text-primary': '#4A4A4A', '--text-secondary': '#7A7A7A', '--accent-primary': '#86A8E7', '--accent-secondary': '#91EAE4', '--border-default': '#D9D9D9' }, Oceanic: { '--bg-primary': '#0B2027', '--bg-secondary': '#12343B', '--text-primary': '#E0FBFC', '--text-secondary': '#96C5D9', '--accent-primary': '#3EF7B2', '--accent-secondary': '#00B4D8', '--border-default': 'rgba(150, 197, 217, 0.4)' }, Sakura: { '--bg-primary': '#F9F1F1', '--bg-secondary': '#FFFFFF', '--text-primary': '#5B4242', '--text-secondary': '#8D6E6E', '--accent-primary': '#E6A4B4', '--accent-secondary': '#FFB7C5', '--border-default': '#E6DEDE' }, Twilight: { '--bg-primary': '#232526', '--bg-secondary': '#414345', '--text-primary': '#E0E0E0', '--text-secondary': '#BDBDBD', '--accent-primary': '#8E44AD', '--accent-secondary': '#9B59B6', '--border-default': '#616161' }, 'Minty Fresh': { '--bg-primary': '#E0F2F1', '--bg-secondary': '#FFFFFF', '--text-primary': '#004D40', '--text-secondary': '#00796B', '--accent-primary': '#4DB6AC', '--accent-secondary': '#80CBC4', '--border-default': '#B2DFDB' }, 'Lavender Dream': { '--bg-primary': '#EAE6F0', '--bg-secondary': '#FFFFFF', '--text-primary': '#4B3F5B', '--text-secondary': '#7A6A89', '--accent-primary': '#C3AED6', '--accent-secondary': '#D8BFD8', '--border-default': '#DCD0E3' }, 'Misty Forest': { '--bg-primary': '#D8E2DC', '--bg-secondary': '#FFFFFF', '--text-primary': '#3A4F41', '--text-secondary': '#6B8A7A', '--accent-primary': '#A3B8A6', '--accent-secondary': '#C2D1C5', '--border-default': '#C4CEC8' }, 'Golden Hour': { '--bg-primary': '#FFF3E0', '--bg-secondary': '#FFFFFF', '--text-primary': '#6D4C41', '--text-secondary': '#9E786B', '--accent-primary': '#FFCC80', '--accent-secondary': '#FFE0B2', '--border-default': '#FFE9D4' }, 'Coral Reef': { '--bg-primary': '#E0F7FA', '--bg-secondary': '#FFFFFF', '--text-primary': '#004C5A', '--text-secondary': '#007A8A', '--accent-primary': '#4DD0E1', '--accent-secondary': '#80DEEA', '--border-default': '#B2EBF2' }, 'Cozy Cabin': { '--bg-primary': '#EFEBE9', '--bg-secondary': '#FFFFFF', '--text-primary': '#5D4037', '--text-secondary': '#8D6E63', '--accent-primary': '#A1887F', '--accent-secondary': '#BCAAA4', '--border-default': '#D7CCC8' }, };
            function applyTheme(themeName) { const t = themes[themeName]; if (!t) return; Object.keys(t).forEach(k => document.documentElement.style.setProperty(k, t[k])); settings.theme = themeName; saveSettings(); }
            function populateThemeSelector() { Object.keys(themes).forEach(n => { const o = document.createElement('option'); o.value = n; o.textContent = n; themeSelect.appendChild(o); }); }
            function applyBackground(name) { backgroundContainer.innerHTML = ''; document.body.classList.remove('animated-gradient'); backgroundContainer.style.backgroundColor = 'transparent'; if (name === 'gradient') { document.body.classList.add('animated-gradient'); } else if (name === 'orbs') { for (let i = 0; i < 20; i++) { const orb = document.createElement('div'); orb.className = 'orb'; const size = Math.random() * 150 + 50; orb.style.width = `${size}px`; orb.style.height = `${size}px`; orb.style.left = `${Math.random() * 100}vw`; orb.style.animationDuration = `${Math.random() * 20 + 15}s`; orb.style.animationDelay = `${Math.random() * 10}s`; backgroundContainer.appendChild(orb); } } else if (name === 'stars') { backgroundContainer.style.backgroundColor = '#0B2027'; for (let i = 0; i < 100; i++) { const star = document.createElement('div'); star.className = 'star'; const size = Math.random() * 2 + 1; star.style.width = `${size}px`; star.style.height = `${size}px`; star.style.top = `${Math.random() * 100}%`; star.style.left = `${Math.random() * 100}%`; star.style.animationDuration = `${Math.random() * 3 + 2}s`; star.style.animationDelay = `${Math.random() * 5}s`; backgroundContainer.appendChild(star); } } settings.background = name; saveSettings(); }

            // --- SIDE PANEL & MODAL ---
            function openSidePanel() { sidePanelContainer.classList.add('active'); }
            function closeSidePanel() { sidePanelContainer.classList.remove('active'); }
            function openTimeEntryModal(dateStr, sessionIndex = -1) { editingSessionIndex = sessionIndex; loadEntryForModal(dateStr, sessionIndex); timeEntryModal.classList.add('active'); }
            function closeTimeEntryModal() { timeEntryModal.classList.remove('active'); }
            function addClickOutsideListener(modalElement, closeFunction) { modalElement.addEventListener('click', (e) => { if (e.target === modalElement) closeFunction(); }); }

            // --- CALENDAR LOGIC ---
            function renderCalendar() { calendarGrid.innerHTML = ''; const month = currentDate.getMonth(); const year = currentDate.getFullYear(); monthYearHeader.textContent = `${currentDate.toLocaleString('default', { month: 'long' })} ${year}`; ['S', 'M', 'T', 'W', 'T', 'F', 'S'].forEach(d => { const e = document.createElement('div'); e.className = 'font-bold text-sm py-2 text-secondary'; e.textContent = d; calendarGrid.appendChild(e); }); const firstDay = new Date(year, month, 1).getDay(); for (let i = 0; i < firstDay; i++) calendarGrid.appendChild(document.createElement('div')); for (let day = 1; day <= new Date(year, month + 1, 0).getDate(); day++) { const dayEl = document.createElement('button'); const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`; dayEl.textContent = day; dayEl.className = 'p-2 rounded-lg transition-all duration-200 aspect-square flex items-center justify-center border'; if (selectedDate === dateStr) { dayEl.classList.add('border-2'); dayEl.style.borderColor = 'var(--accent-primary)'; } else { dayEl.style.borderColor = 'var(--border-default)'; } if (timeData[dateStr] && calculateHours(dateStr) > 0) { dayEl.classList.add('font-bold'); dayEl.style.backgroundColor = 'var(--accent-secondary)'; dayEl.style.color = 'white'; } const today = new Date(); if (day === today.getDate() && month === today.getMonth() && year === today.getFullYear()) { dayEl.classList.add('font-extrabold'); } dayEl.addEventListener('click', () => { selectedDate = dateStr; updateDisplayPanel(dateStr); renderCalendar(); if (calculateHours(dateStr) > 0) { openSidePanel(); } else { openTimeEntryModal(dateStr, -1); } }); calendarGrid.appendChild(dayEl); } }

            // --- UI & DATA FLOW ---
            function updateDisplayPanel(dateStr) { const entry = timeData[dateStr] || { sessions: [] }; const dateObj = new Date(dateStr.replace(/-/g, '/')); displaySelectedDate.textContent = dateObj.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }); sessionsDisplayArea.innerHTML = ''; const hasHours = calculateHours(dateStr) > 0; noHoursMessage.classList.toggle('hidden', !hasHours); addSessionBtn.classList.toggle('hidden', !dateStr); if (hasHours) { entry.sessions.forEach((session, index) => { const sEl = document.createElement('div'); sEl.className = 'p-3 rounded-lg flex items-center gap-2'; sEl.style.backgroundColor = 'var(--bg-primary)'; let sessionText = ''; if (session.type === 'SICK' || session.type === 'VAC') { sessionText = `${(session.hours || 0).toFixed(2)} hours`; } else { sessionText = `${formatTo12Hour(session.in)} - ${formatTo12Hour(session.out) || '...'}`; } sEl.innerHTML = `<div class="flex-grow"><div class="flex justify-between items-center text-sm"><span>${sessionText}</span><span class="font-bold">${session.type || 'N/A'}</span></div></div>`; const ctrls = document.createElement('div'); ctrls.className = 'flex items-center'; const editBtn = document.createElement('button'); editBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>`; editBtn.className = 'p-1 hover:text-blue-500'; editBtn.title = "Edit Entry"; editBtn.onclick = () => openTimeEntryModal(dateStr, index); const delBtn = document.createElement('button'); delBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg>`; delBtn.className = 'p-1 hover:text-red-500'; delBtn.title = "Delete Entry"; delBtn.onclick = () => deleteSession(dateStr, index); ctrls.appendChild(editBtn); ctrls.appendChild(delBtn); sEl.appendChild(ctrls); sessionsDisplayArea.appendChild(sEl); }); } displayDayTotal.textContent = `${calculateHours(dateStr).toFixed(2)}h`; }
            function updateHourTypeSelectionUI() { hourTypeButtons.forEach(b => { b.classList.toggle('btn-primary', b.dataset.type === modalHourType); b.classList.toggle('btn-secondary', b.dataset.type !== modalHourType); }); }
            function updateModalUIForType(type) { if (type === 'SICK' || type === 'VAC') { timeInContainer.style.display = 'none'; timeOutContainer.style.display = 'none'; bulkHoursContainer.style.display = 'block'; } else { timeInContainer.style.display = 'block'; timeOutContainer.style.display = 'block'; bulkHoursContainer.style.display = 'none'; } }
            function loadEntryForModal(dateStr, sessionIndex) { const entry = timeData[dateStr] || { sessions: [] }; const dateObj = new Date(dateStr.replace(/-/g, '/')); modalSelectedDate.textContent = dateObj.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }); bulkHoursInput.value = ''; timeInInput.value = ''; timeOutInput.value = ''; if (sessionIndex >= 0 && entry.sessions[sessionIndex]) { const s = entry.sessions[sessionIndex]; modalTitle.textContent = "Edit Entry"; modalHourType = s.type || 'CORE'; if (s.type === 'SICK' || s.type === 'VAC') { bulkHoursInput.value = s.hours || ''; } else { timeInInput.value = s.in || ''; timeOutInput.value = s.out || ''; } } else { modalTitle.textContent = "Add New Entry"; modalHourType = 'CORE'; } updateHourTypeSelectionUI(); updateModalUIForType(modalHourType); }
            function saveEntry() { if (!selectedDate) return; if (!timeData[selectedDate]) timeData[selectedDate] = { sessions: [] }; let newEntry; if (modalHourType === 'SICK' || modalHourType === 'VAC') { newEntry = { hours: parseFloat(bulkHoursInput.value) || 0, type: modalHourType }; } else { newEntry = { in: timeInInput.value, out: timeOutInput.value, type: modalHourType }; } if (editingSessionIndex >= 0) { timeData[selectedDate].sessions[editingSessionIndex] = newEntry; } else { timeData[selectedDate].sessions.push(newEntry); } showNotification('Entry saved!'); saveData(); updateAllUI(); checkAllAchievements({ date: selectedDate }); setTimeout(closeTimeEntryModal, 400); }
            function deleteSession(dateStr, index) { showConfirm("Delete this entry?", () => { if(timeData[dateStr] && timeData[dateStr].sessions[index]) { timeData[dateStr].sessions.splice(index, 1); showNotification('Entry deleted.'); saveData(); updateAllUI(); } }); }
            function calculateHours(dateStr) { const e = timeData[dateStr]; if (!e || !e.sessions) return 0; let totalHours = 0; e.sessions.forEach(s => { if (s.type === 'SICK' || s.type === 'VAC') { totalHours += s.hours || 0; } else { if (s.in && s.out) { const i = new Date(`${dateStr}T${s.in}`); const o = new Date(`${dateStr}T${s.out}`); if (o > i) { totalHours += (o - i) / 3600000; } } } }); return totalHours; }
            function updateAllUI() { renderCalendar(); updateSummaries(); if(selectedDate) updateDisplayPanel(selectedDate); }
            function updateSummaries() { const todayStr = getDateString(new Date()); summaryToday.textContent = `${calculateHours(todayStr).toFixed(2)}h`; summaryTotal.textContent = `${Object.keys(timeData).reduce((a, d) => a + calculateHours(d), 0).toFixed(2)}h`; let periodHours = 0; const today = new Date(); for (let i = 0; i < 14; i++) { const date = new Date(today); date.setDate(today.getDate() - i); periodHours += calculateHours(getDateString(date)); } summaryPayPeriod.textContent = `${periodHours.toFixed(2)}h`; }
            function generateAndShowTimesheet() { const refStartDate = new Date('2025-07-05T00:00:00'); const today = new Date(); const periodDuration = 14; const msPerDay = 1000 * 60 * 60 * 24; const daysSinceRef = Math.floor((today - refStartDate) / msPerDay); const periodNum = Math.floor(daysSinceRef / periodDuration); const periodStartDate = new Date(refStartDate); periodStartDate.setDate(refStartDate.getDate() + (periodNum * periodDuration)); const periodEndDate = new Date(periodStartDate); periodEndDate.setDate(periodStartDate.getDate() + (periodDuration - 1)); let timesheetLines = []; let acapTotal = 0, coreTotal = 0, sickTotal = 0, vacTotal = 0; for (let d = new Date(periodStartDate); d <= periodEndDate; d.setDate(d.getDate() + 1)) { const dateStr = getDateString(d); const entry = timeData[dateStr]; const dayOfWeekStr = d.toLocaleDateString('en-US', { weekday: 'short' }); const month = d.toLocaleDateString('en-US', { month: 'short' }); const dayWithSuffix = getDayWithSuffix(d); const baseLine = `${dayOfWeekStr} ${dayWithSuffix} - ${month}`; let dayHasContent = false; if (entry && entry.sessions && entry.sessions.length > 0) { entry.sessions.forEach(session => { if (session.type === 'SICK' || session.type === 'VAC') { const sessionHours = session.hours || 0; if (sessionHours > 0) { timesheetLines.push(`${baseLine} ${sessionHours.toFixed(2)} ${session.type}`); if (session.type === 'SICK') sickTotal += sessionHours; if (session.type === 'VAC') vacTotal += sessionHours; dayHasContent = true; } } else { if (session.in && session.out) { const roundedIn = roundTimeString(session.in); const roundedOut = roundTimeString(session.out); const inDate = new Date(`${dateStr}T${roundedIn}`); let outDate = new Date(`${dateStr}T${roundedOut}`); if (outDate < inDate) { outDate.setDate(outDate.getDate() + 1); } const sessionHours = (outDate - inDate) / 3600000; if (sessionHours > 0) { timesheetLines.push(`${baseLine} ${formatTo12Hour(roundedIn)} - ${formatTo12Hour(roundedOut)} ${sessionHours.toFixed(2)} ${session.type || 'CORE'}`); if (session.type === 'ACAP') { acapTotal += sessionHours; } else { coreTotal += sessionHours; } dayHasContent = true; } } }); } if (!dayHasContent) { const isWeekend = d.getDay() === 0 || d.getDay() === 6; if (isWeekend) { timesheetLines.push(`${baseLine} - Closed`); } else { timesheetLines.push(baseLine); } } } const grandTotal = acapTotal + coreTotal + sickTotal + vacTotal; const summaryLines = [ '\nHere is the summary:\n', `ACAP total: ${acapTotal.toFixed(2)} hours`, `Core total: ${coreTotal.toFixed(2)} hours`, `Sick total: ${sickTotal.toFixed(2)} hours`, `Vacation total: ${vacTotal.toFixed(2)} hours`, `\nTotal: ${grandTotal.toFixed(2)} hours` ]; timesheetOutput.value = timesheetLines.join('\n') + summaryLines.join('\n'); timesheetModal.classList.add('active'); showNotification("Timesheet generated. Hours rounded to nearest quarter hour."); }
            function showNotification(message) { clearTimeout(notificationTimeout); notificationMessage.textContent = message; notificationToast.classList.add('show'); notificationTimeout = setTimeout(() => notificationToast.classList.remove('show'), 4000); }
            function showConfirm(message, onConfirm) { confirmMessage.textContent = message; onConfirmCallback = onConfirm; confirmModal.classList.add('active'); }
            function showTimecard(status, time) { timecardStatus.textContent = status; timecardTime.textContent = time; timecardPopup.classList.add('show'); setTimeout(() => { timecardPopup.classList.remove('show'); }, 2500); }

            // --- ACHIEVEMENT SYSTEM ---
            const achievements = { firstClockIn: { title: "Early Bird", desc: "You clocked in for the first time!", check: () => Object.keys(timeData).length > 0 }, firstClockOut: { title: "And... Scene!", desc: "You finished your first session!", check: () => Object.values(timeData).some(d => d.sessions && d.sessions.some(s => s.in && s.out)) }, weekly10: { title: "Getting Warmed Up", desc: "You worked 10 hours in a week!", check: () => getWeekHours(new Date()) >= 10 }, weekly20: { title: "Part-Time Pro", desc: "You worked 20 hours in a week!", check: () => getWeekHours(new Date()) >= 20 }, weekly40: { title: "Full-Time Hero", desc: "You worked 40 hours in a week!", check: () => getWeekHours(new Date()) >= 40 }, firstPayPeriod: { title: "First Paycheck!", desc: "You completed your first pay period!", check: () => hasCompletedPayPeriod() }, oneMonth: { title: "Monthly Milestone", desc: "You've been tracking for a month!", check: () => checkDuration(30) }, sixMonths: { title: "Half-Year Hustler", desc: "Six months of hard work!", check: () => checkDuration(182) }, oneYear: { title: "Anniversary Ace", desc: "A full year of dedication!", check: () => checkDuration(365) }, shortShift: { title: "Quick Trip", desc: "Worked for less than an hour.", check: (data) => data?.lastSessionHours > 0 && data.lastSessionHours < 1 }, bothTypes: { title: "Jack of All Trades", desc: "Logged both CORE and ACAP in one day!", check: (data) => { if (!data?.date) return false; const entry = timeData[data.date]; if (!entry || !entry.sessions) return false; const types = new Set(entry.sessions.map(s => s.type)); return types.has('CORE') && types.has('ACAP'); }}, };
            function getWeekHours(refDate) { let total = 0; const startOfWeek = new Date(refDate); startOfWeek.setDate(refDate.getDate() - refDate.getDay()); for(let i=0; i<7; i++) { const day = new Date(startOfWeek); day.setDate(startOfWeek.getDate() + i); total += calculateHours(getDateString(day)); } return total; }
            function hasCompletedPayPeriod() { const refStartDate = new Date('2025-07-05T00:00:00'); const today = new Date(); const msPerDay = 1000 * 60 * 60 * 24; const daysSinceRef = Math.floor((today - refStartDate) / msPerDay); const periodNum = Math.floor(daysSinceRef / 14); if (periodNum < 1) return false; const prevPeriodStartDate = new Date(refStartDate); prevPeriodStartDate.setDate(refStartDate.getDate() + ((periodNum - 1) * 14)); let prevPeriodHours = 0; for (let i = 0; i < 14; i++) { const date = new Date(prevPeriodStartDate); date.setDate(prevPeriodStartDate.getDate() + i); prevPeriodHours += calculateHours(getDateString(date)); } return prevPeriodHours > 0; }
            function checkDuration(days) { const dateKeys = Object.keys(timeData); if (dateKeys.length === 0) return false; const firstDate = new Date(dateKeys.sort()[0]); const diff = (new Date() - firstDate) / (1000 * 60 * 60 * 24); return diff >= days; }
            function checkAllAchievements(eventData, isInitialLoad = false) { Object.keys(achievements).forEach(id => { if (!unlockedAchievements[id] && achievements[id].check(eventData)) { unlockAchievement(id, !isInitialLoad); } }); }
            function unlockAchievement(id, playSound = true) { unlockedAchievements[id] = true; achievementQueue.push({ id, playSound }); processAchievementQueue(); saveData(); }
            function processAchievementQueue() { if (isDisplayingAchievement || achievementQueue.length === 0) return; isDisplayingAchievement = true; const { id, playSound } = achievementQueue.shift(); const achievement = achievements[id]; achievementTitle.textContent = achievement.title; achievementDesc.textContent = achievement.desc; achievementToast.classList.add('show'); if (playSound) { playAchievementSound(); } setTimeout(() => { achievementToast.classList.remove('show'); setTimeout(() => { isDisplayingAchievement = false; processAchievementQueue(); }, 500); }, 4000); }

            // --- LOCAL STORAGE ---
            function saveData() { localStorage.setItem('timeTrackerData', JSON.stringify(timeData)); localStorage.setItem('unlockedAchievements', JSON.stringify(unlockedAchievements)); }
            function loadData() { const d = localStorage.getItem('timeTrackerData'); if (d) timeData = JSON.parse(d); const a = localStorage.getItem('unlockedAchievements'); if (a) unlockedAchievements = JSON.parse(a); }
            function saveSettings() { localStorage.setItem('timeTrackerSettings', JSON.stringify(settings)); }
            function loadSettings() { const s = localStorage.getItem('timeTrackerSettings'); if (s) settings = {...settings, ...JSON.parse(s)}; }
            function clearAllData() { showConfirm('Delete all entries and achievements?', () => { showConfirm('This action is permanent and cannot be undone. Are you absolutely sure?', () => { timeData = {}; unlockedAchievements = {}; settings = { theme: 'Parchment', background: 'none' }; localStorage.removeItem('timeTrackerData'); localStorage.removeItem('unlockedAchievements'); localStorage.removeItem('timeTrackerSettings'); localStorage.removeItem('timeTrackerDisclaimerSeen'); applyTheme(settings.theme); themeSelect.value = settings.theme; applyBackground(settings.background); backgroundSelect.value = settings.background; updateAllUI(); showNotification('All data has been permanently cleared.'); }); }); }

            // --- EVENT LISTENERS ---
            prevMonthBtn.addEventListener('click', () => { currentDate.setMonth(currentDate.getMonth() - 1); renderCalendar(); });
            nextMonthBtn.addEventListener('click', () => { currentDate.setMonth(currentDate.getMonth() + 1); renderCalendar(); });
            addSessionBtn.addEventListener('click', () => { openTimeEntryModal(selectedDate, -1); });
            saveBtn.addEventListener('click', saveEntry);
            closeEntryModalBtn.addEventListener('click', closeTimeEntryModal);
            closeSidePanelBtn.addEventListener('click', closeSidePanel);
            sidePanelBackdrop.addEventListener('click', closeSidePanel);
            settingsBtn.addEventListener('click', () => settingsModal.classList.add('active'));
            closeSettingsModalBtn.addEventListener('click', () => settingsModal.classList.remove('active'));
            summaryBtn.addEventListener('click', () => summaryModal.classList.add('active'));
            closeSummaryModalBtn.addEventListener('click', () => summaryModal.classList.remove('active'));
            confirmOkBtn.addEventListener('click', () => { if (onConfirmCallback) onConfirmCallback(); confirmModal.classList.remove('active'); onConfirmCallback = null; });
            confirmCancelBtn.addEventListener('click', () => { confirmModal.classList.remove('active'); onConfirmCallback = null; });
            themeSelect.addEventListener('change', e => applyTheme(e.target.value));
            backgroundSelect.addEventListener('change', e => applyBackground(e.target.value));
            clearDataBtn.addEventListener('click', clearAllData);
            hourTypeButtons.forEach(b => { b.addEventListener('click', () => { modalHourType = b.dataset.type; updateHourTypeSelectionUI(); updateModalUIForType(modalHourType); }); });
            turnInHoursBtn.addEventListener('click', () => { generateAndShowTimesheet(); playTurnInSound(); });
            copyTimesheetBtn.addEventListener('click', () => { navigator.clipboard.writeText(timesheetOutput.value).then(() => showNotification('Timesheet copied to clipboard!')).catch(err => { console.error('Could not copy text: ', err); showNotification('Failed to copy. Please copy manually.'); }); });
            const closeSheet = () => timesheetModal.classList.remove('active');
            closeTimesheetModalBtn.addEventListener('click', closeSheet);
            closeTimesheetBtnBottom.addEventListener('click', closeSheet);
            viewStatsBtn.addEventListener('click', () => { renderCharts(); statsModal.classList.add('active'); });
            closeStatsModalBtn.addEventListener('click', () => statsModal.classList.remove('active'));
            clockInBtn.addEventListener('click', () => { const now = new Date(); const todayStr = getDateString(now); if (!timeData[todayStr]) timeData[todayStr] = { sessions: [] }; if (timeData[todayStr].sessions.find(s => s.in && !s.out)) { showNotification('You are already clocked in.'); return; } const exactTime = getExactTime(now); timeData[todayStr].sessions.push({ in: exactTime, type: 'CORE' }); selectedDate = todayStr; saveData(); updateAllUI(); showTimecard('Clocked In', formatTo12Hour(exactTime)); playClockInSound(); checkAllAchievements(); });
            clockOutBtn.addEventListener('click', () => { const todayStr = getDateString(new Date()); if (!timeData[todayStr]?.sessions.find(s => s.in && !s.out)) { showNotification('You are not clocked in.'); return; } clockOutTypeModal.classList.add('active'); });
            function handleClockOutWithType(type) { const now = new Date(); const todayStr = getDateString(now); const openSessionIdx = timeData[todayStr].sessions.findIndex(s => s.in && !s.out); if (openSessionIdx > -1) { const exactTime = getExactTime(now); const session = timeData[todayStr].sessions[openSessionIdx]; session.out = exactTime; session.type = type; selectedDate = todayStr; const inDate = new Date(`${todayStr}T${session.in}`); const outDate = new Date(`${todayStr}T${session.out}`); const lastSessionHours = (outDate > inDate) ? (outDate - inDate) / 3600000 : 0; saveData(); updateAllUI(); clockOutTypeModal.classList.remove('active'); showTimecard('Clocked Out', formatTo12Hour(exactTime)); playClockOutSound(); checkAllAchievements({ lastSessionHours: lastSessionHours, date: todayStr }); } }
            confirmAcapBtn.addEventListener('click', () => handleClockOutWithType('ACAP'));
            confirmCoreBtn.addEventListener('click', () => handleClockOutWithType('CORE'));
            clockOutCancelBtn.addEventListener('click', () => clockOutTypeModal.classList.remove('active'));
            disclaimerOkBtn.addEventListener('click', () => { disclaimerModal.classList.remove('active'); localStorage.setItem('timeTrackerDisclaimerSeen', 'true'); });
            showReminderBtn.addEventListener('click', () => { settingsModal.classList.remove('active'); disclaimerModal.classList.add('active'); });
            addClickOutsideListener(timeEntryModal, closeTimeEntryModal);
            addClickOutsideListener(settingsModal, () => settingsModal.classList.remove('active'));
            addClickOutsideListener(summaryModal, () => summaryModal.classList.remove('active'));
            addClickOutsideListener(statsModal, () => statsModal.classList.remove('active'));
            addClickOutsideListener(timesheetModal, closeSheet);
            addClickOutsideListener(disclaimerModal, () => { disclaimerModal.classList.remove('active'); if(!localStorage.getItem('timeTrackerDisclaimerSeen')) {localStorage.setItem('timeTrackerDisclaimerSeen', 'true');} });

            function renderCharts() { if (weeklyChartInstance) weeklyChartInstance.destroy(); if (typeChartInstance) typeChartInstance.destroy(); const dateKeys = Object.keys(timeData).sort(); if(dateKeys.length === 0) { statsNoDataMessage.classList.remove('hidden'); return; } else { statsNoDataMessage.classList.add('hidden'); } const last12Weeks = []; for (let i = 11; i >= 0; i--) { const d = new Date(); d.setDate(d.getDate() - (i * 7)); last12Weeks.push({ label: `Week of ${d.getMonth()+1}/${d.getDate()}`, hours: getWeekHours(d) }); } weeklyChartInstance = new Chart(weeklyHoursCtx, { type: 'bar', data: { labels: last12Weeks.map(w => w.label), datasets: [{ label: 'Weekly Hours', data: last12Weeks.map(w => w.hours.toFixed(2)), backgroundColor: 'rgba(134, 168, 231, 0.5)', borderColor: 'rgba(134, 168, 231, 1)', borderWidth: 1, borderRadius: 5 }] } }); let coreHours = 0, acapHours = 0, sickHours = 0, vacHours = 0; Object.values(timeData).forEach(day => { day.sessions.forEach(s => { if (s.type === 'SICK') { sickHours += s.hours || 0; } else if (s.type === 'VAC') { vacHours += s.hours || 0; } else if (s.in && s.out) { const i = new Date(`1970-01-01T${s.in}`); const o = new Date(`1970-01-01T${s.out}`); const hours = (o > i) ? (o - i) / 3600000 : 0; if (s.type === 'ACAP') acapHours += hours; else coreHours += hours; } }); }); const chartData = [], chartLabels = [], chartColors = [], chartBorders = []; if (coreHours > 0) { chartLabels.push('CORE'); chartData.push(coreHours); chartColors.push('rgba(145, 234, 228, 0.7)'); chartBorders.push('#91EAE4'); } if (acapHours > 0) { chartLabels.push('ACAP'); chartData.push(acapHours); chartColors.push('rgba(134, 168, 231, 0.7)'); chartBorders.push('#86A8E7'); } if (sickHours > 0) { chartLabels.push('SICK'); chartData.push(sickHours); chartColors.push('rgba(255, 182, 193, 0.7)'); chartBorders.push('#FFB6C1'); } if (vacHours > 0) { chartLabels.push('VAC'); chartData.push(vacHours); chartColors.push('rgba(255, 215, 0, 0.7)'); chartBorders.push('#FFD700'); } typeChartInstance = new Chart(typeBreakdownCtx, { type: 'doughnut', data: { labels: chartLabels, datasets: [{ data: chartData, backgroundColor: chartColors, borderColor: chartBorders, borderWidth: 2 }] }, options: { responsive: true, maintainAspectRatio: true } }); }
            function hideSplashScreen() { clearTimeout(autoStartTimer); splashScreen.classList.add('opacity-0', 'pointer-events-none'); setTimeout(() => { splashScreen.style.display = 'none'; }, 500); }
            function showSplashScreen() { const titleText = "Hours for Shelby"; titleText.split('').forEach((char, index) => { const span = document.createElement('span'); span.textContent = char === ' ' ? '\u00A0' : char; span.style.animationDelay = `${index * 0.05}s`; splashTitle.appendChild(span); }); setTimeout(() => { const cog = document.querySelector('.splash-cog'); const face = document.querySelector('.splash-clock-face'); const hands = document.querySelector('.splash-clock-hands'); const minuteHand = document.querySelector('.minute-hand'); const hourHand = document.querySelector('.hour-hand'); cog.classList.add('fade-out'); face.classList.add('fade-in'); hands.classList.add('fade-in'); setTimeout(() => { minuteHand.classList.add('spinning'); hourHand.classList.add('spinning'); }, 500); }, 1500); autoStartTimer = setTimeout(hideSplashScreen, 5000); splashStartBtn.addEventListener('click', hideSplashScreen); }
            
            // --- INITIALIZATION ---
            function init() { showSplashScreen(); initAudio(); loadSettings(); loadData(); updateDigitalClock(); setInterval(updateDigitalClock, 1000); populateThemeSelector(); themeSelect.value = settings.theme; applyTheme(settings.theme); backgroundSelect.value = settings.background; applyBackground(settings.background); selectedDate = getDateString(new Date()); updateAllUI(); checkAllAchievements({}, true); if (!localStorage.getItem('timeTrackerDisclaimerSeen')) { disclaimerModal.classList.add('active'); } }
            init();
        };
    </script>
</body>
</html>
